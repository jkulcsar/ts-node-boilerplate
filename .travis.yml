language: node_js
node_js:
  - lts/*
sudo: required
services:
  - docker
  - mongodb

before_install:
# not sure if should build with docker here or just simple npm install
#  - docker build -t $DOCKER_ID/ts-node-boilerplate -f ./Dockerfile.test ./
  - npm install

# perhaps we need to install a new version of docker-compose
# for now just show the current version
# install:
#  - docker-compose version

# before_script:
#   - docker-compose -f docker-compose.test.yml up --build

script:
#  - docker-compose -f docker-compose.test.yml up --build
# env variable CI=true is always available in Travis CI
#- docker run $DOCKER_ID/ts-node-boilerplate npm test -- --coverage
# far from ideal: tests should be run in their own container,
# using docker-compose.test.yml which should exit on success.
# the test suite exits, the test_1 image exits but the mongodb does not exit
  - npm run test

#after_script:
#  - docker-compose -f docker-compose.test.yml down

after_success:
  - docker build -f Dockerfile.prod -t $DOCKER_ID/ts-node-boilerplate ./

  # Log in to the docker CLI
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin

  # Take those images and push them to docker hub
  - docker push $DOCKER_ID/ts-node-boilerplate
 
# deploy:
# still to do: how to deploy to a dockerized environment through SSH
# and run a docker-compose up in that environment?
# or just use a cloud deployment for now?
